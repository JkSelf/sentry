/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.sentry.provider.db.service.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSentryMappingData implements org.apache.thrift.TBase<TSentryMappingData, TSentryMappingData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSentryMappingData");

  private static final org.apache.thrift.protocol.TField GROUP_ROLES_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("groupRolesMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField ROLE_PRIVILEGES_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("rolePrivilegesMap", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ROLES_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("userRolesMap", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSentryMappingDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSentryMappingDataTupleSchemeFactory());
  }

  private Map<String,Set<String>> groupRolesMap; // optional
  private Map<String,Set<TSentryPrivilege>> rolePrivilegesMap; // optional
  private Map<String,Set<String>> userRolesMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_ROLES_MAP((short)1, "groupRolesMap"),
    ROLE_PRIVILEGES_MAP((short)2, "rolePrivilegesMap"),
    USER_ROLES_MAP((short)3, "userRolesMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_ROLES_MAP
          return GROUP_ROLES_MAP;
        case 2: // ROLE_PRIVILEGES_MAP
          return ROLE_PRIVILEGES_MAP;
        case 3: // USER_ROLES_MAP
          return USER_ROLES_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.GROUP_ROLES_MAP,_Fields.ROLE_PRIVILEGES_MAP,_Fields.USER_ROLES_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_ROLES_MAP, new org.apache.thrift.meta_data.FieldMetaData("groupRolesMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.ROLE_PRIVILEGES_MAP, new org.apache.thrift.meta_data.FieldMetaData("rolePrivilegesMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSentryPrivilege.class)))));
    tmpMap.put(_Fields.USER_ROLES_MAP, new org.apache.thrift.meta_data.FieldMetaData("userRolesMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSentryMappingData.class, metaDataMap);
  }

  public TSentryMappingData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSentryMappingData(TSentryMappingData other) {
    if (other.isSetGroupRolesMap()) {
      Map<String,Set<String>> __this__groupRolesMap = new HashMap<String,Set<String>>();
      for (Map.Entry<String, Set<String>> other_element : other.groupRolesMap.entrySet()) {

        String other_element_key = other_element.getKey();
        Set<String> other_element_value = other_element.getValue();

        String __this__groupRolesMap_copy_key = other_element_key;

        Set<String> __this__groupRolesMap_copy_value = new HashSet<String>();
        for (String other_element_value_element : other_element_value) {
          __this__groupRolesMap_copy_value.add(other_element_value_element);
        }

        __this__groupRolesMap.put(__this__groupRolesMap_copy_key, __this__groupRolesMap_copy_value);
      }
      this.groupRolesMap = __this__groupRolesMap;
    }
    if (other.isSetRolePrivilegesMap()) {
      Map<String,Set<TSentryPrivilege>> __this__rolePrivilegesMap = new HashMap<String,Set<TSentryPrivilege>>();
      for (Map.Entry<String, Set<TSentryPrivilege>> other_element : other.rolePrivilegesMap.entrySet()) {

        String other_element_key = other_element.getKey();
        Set<TSentryPrivilege> other_element_value = other_element.getValue();

        String __this__rolePrivilegesMap_copy_key = other_element_key;

        Set<TSentryPrivilege> __this__rolePrivilegesMap_copy_value = new HashSet<TSentryPrivilege>();
        for (TSentryPrivilege other_element_value_element : other_element_value) {
          __this__rolePrivilegesMap_copy_value.add(new TSentryPrivilege(other_element_value_element));
        }

        __this__rolePrivilegesMap.put(__this__rolePrivilegesMap_copy_key, __this__rolePrivilegesMap_copy_value);
      }
      this.rolePrivilegesMap = __this__rolePrivilegesMap;
    }
    if (other.isSetUserRolesMap()) {
      Map<String,Set<String>> __this__userRolesMap = new HashMap<String,Set<String>>();
      for (Map.Entry<String, Set<String>> other_element : other.userRolesMap.entrySet()) {

        String other_element_key = other_element.getKey();
        Set<String> other_element_value = other_element.getValue();

        String __this__userRolesMap_copy_key = other_element_key;

        Set<String> __this__userRolesMap_copy_value = new HashSet<String>();
        for (String other_element_value_element : other_element_value) {
          __this__userRolesMap_copy_value.add(other_element_value_element);
        }

        __this__userRolesMap.put(__this__userRolesMap_copy_key, __this__userRolesMap_copy_value);
      }
      this.userRolesMap = __this__userRolesMap;
    }
  }

  public TSentryMappingData deepCopy() {
    return new TSentryMappingData(this);
  }

  @Override
  public void clear() {
    this.groupRolesMap = null;
    this.rolePrivilegesMap = null;
    this.userRolesMap = null;
  }

  public int getGroupRolesMapSize() {
    return (this.groupRolesMap == null) ? 0 : this.groupRolesMap.size();
  }

  public void putToGroupRolesMap(String key, Set<String> val) {
    if (this.groupRolesMap == null) {
      this.groupRolesMap = new HashMap<String,Set<String>>();
    }
    this.groupRolesMap.put(key, val);
  }

  public Map<String,Set<String>> getGroupRolesMap() {
    return this.groupRolesMap;
  }

  public void setGroupRolesMap(Map<String,Set<String>> groupRolesMap) {
    this.groupRolesMap = groupRolesMap;
  }

  public void unsetGroupRolesMap() {
    this.groupRolesMap = null;
  }

  /** Returns true if field groupRolesMap is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupRolesMap() {
    return this.groupRolesMap != null;
  }

  public void setGroupRolesMapIsSet(boolean value) {
    if (!value) {
      this.groupRolesMap = null;
    }
  }

  public int getRolePrivilegesMapSize() {
    return (this.rolePrivilegesMap == null) ? 0 : this.rolePrivilegesMap.size();
  }

  public void putToRolePrivilegesMap(String key, Set<TSentryPrivilege> val) {
    if (this.rolePrivilegesMap == null) {
      this.rolePrivilegesMap = new HashMap<String,Set<TSentryPrivilege>>();
    }
    this.rolePrivilegesMap.put(key, val);
  }

  public Map<String,Set<TSentryPrivilege>> getRolePrivilegesMap() {
    return this.rolePrivilegesMap;
  }

  public void setRolePrivilegesMap(Map<String,Set<TSentryPrivilege>> rolePrivilegesMap) {
    this.rolePrivilegesMap = rolePrivilegesMap;
  }

  public void unsetRolePrivilegesMap() {
    this.rolePrivilegesMap = null;
  }

  /** Returns true if field rolePrivilegesMap is set (has been assigned a value) and false otherwise */
  public boolean isSetRolePrivilegesMap() {
    return this.rolePrivilegesMap != null;
  }

  public void setRolePrivilegesMapIsSet(boolean value) {
    if (!value) {
      this.rolePrivilegesMap = null;
    }
  }

  public int getUserRolesMapSize() {
    return (this.userRolesMap == null) ? 0 : this.userRolesMap.size();
  }

  public void putToUserRolesMap(String key, Set<String> val) {
    if (this.userRolesMap == null) {
      this.userRolesMap = new HashMap<String,Set<String>>();
    }
    this.userRolesMap.put(key, val);
  }

  public Map<String,Set<String>> getUserRolesMap() {
    return this.userRolesMap;
  }

  public void setUserRolesMap(Map<String,Set<String>> userRolesMap) {
    this.userRolesMap = userRolesMap;
  }

  public void unsetUserRolesMap() {
    this.userRolesMap = null;
  }

  /** Returns true if field userRolesMap is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRolesMap() {
    return this.userRolesMap != null;
  }

  public void setUserRolesMapIsSet(boolean value) {
    if (!value) {
      this.userRolesMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_ROLES_MAP:
      if (value == null) {
        unsetGroupRolesMap();
      } else {
        setGroupRolesMap((Map<String,Set<String>>)value);
      }
      break;

    case ROLE_PRIVILEGES_MAP:
      if (value == null) {
        unsetRolePrivilegesMap();
      } else {
        setRolePrivilegesMap((Map<String,Set<TSentryPrivilege>>)value);
      }
      break;

    case USER_ROLES_MAP:
      if (value == null) {
        unsetUserRolesMap();
      } else {
        setUserRolesMap((Map<String,Set<String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_ROLES_MAP:
      return getGroupRolesMap();

    case ROLE_PRIVILEGES_MAP:
      return getRolePrivilegesMap();

    case USER_ROLES_MAP:
      return getUserRolesMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_ROLES_MAP:
      return isSetGroupRolesMap();
    case ROLE_PRIVILEGES_MAP:
      return isSetRolePrivilegesMap();
    case USER_ROLES_MAP:
      return isSetUserRolesMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSentryMappingData)
      return this.equals((TSentryMappingData)that);
    return false;
  }

  public boolean equals(TSentryMappingData that) {
    if (that == null)
      return false;

    boolean this_present_groupRolesMap = true && this.isSetGroupRolesMap();
    boolean that_present_groupRolesMap = true && that.isSetGroupRolesMap();
    if (this_present_groupRolesMap || that_present_groupRolesMap) {
      if (!(this_present_groupRolesMap && that_present_groupRolesMap))
        return false;
      if (!this.groupRolesMap.equals(that.groupRolesMap))
        return false;
    }

    boolean this_present_rolePrivilegesMap = true && this.isSetRolePrivilegesMap();
    boolean that_present_rolePrivilegesMap = true && that.isSetRolePrivilegesMap();
    if (this_present_rolePrivilegesMap || that_present_rolePrivilegesMap) {
      if (!(this_present_rolePrivilegesMap && that_present_rolePrivilegesMap))
        return false;
      if (!this.rolePrivilegesMap.equals(that.rolePrivilegesMap))
        return false;
    }

    boolean this_present_userRolesMap = true && this.isSetUserRolesMap();
    boolean that_present_userRolesMap = true && that.isSetUserRolesMap();
    if (this_present_userRolesMap || that_present_userRolesMap) {
      if (!(this_present_userRolesMap && that_present_userRolesMap))
        return false;
      if (!this.userRolesMap.equals(that.userRolesMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_groupRolesMap = true && (isSetGroupRolesMap());
    builder.append(present_groupRolesMap);
    if (present_groupRolesMap)
      builder.append(groupRolesMap);

    boolean present_rolePrivilegesMap = true && (isSetRolePrivilegesMap());
    builder.append(present_rolePrivilegesMap);
    if (present_rolePrivilegesMap)
      builder.append(rolePrivilegesMap);

    boolean present_userRolesMap = true && (isSetUserRolesMap());
    builder.append(present_userRolesMap);
    if (present_userRolesMap)
      builder.append(userRolesMap);

    return builder.toHashCode();
  }

  public int compareTo(TSentryMappingData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TSentryMappingData typedOther = (TSentryMappingData)other;

    lastComparison = Boolean.valueOf(isSetGroupRolesMap()).compareTo(typedOther.isSetGroupRolesMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupRolesMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupRolesMap, typedOther.groupRolesMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRolePrivilegesMap()).compareTo(typedOther.isSetRolePrivilegesMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRolePrivilegesMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rolePrivilegesMap, typedOther.rolePrivilegesMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserRolesMap()).compareTo(typedOther.isSetUserRolesMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRolesMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRolesMap, typedOther.userRolesMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSentryMappingData(");
    boolean first = true;

    if (isSetGroupRolesMap()) {
      sb.append("groupRolesMap:");
      if (this.groupRolesMap == null) {
        sb.append("null");
      } else {
        sb.append(this.groupRolesMap);
      }
      first = false;
    }
    if (isSetRolePrivilegesMap()) {
      if (!first) sb.append(", ");
      sb.append("rolePrivilegesMap:");
      if (this.rolePrivilegesMap == null) {
        sb.append("null");
      } else {
        sb.append(this.rolePrivilegesMap);
      }
      first = false;
    }
    if (isSetUserRolesMap()) {
      if (!first) sb.append(", ");
      sb.append("userRolesMap:");
      if (this.userRolesMap == null) {
        sb.append("null");
      } else {
        sb.append(this.userRolesMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSentryMappingDataStandardSchemeFactory implements SchemeFactory {
    public TSentryMappingDataStandardScheme getScheme() {
      return new TSentryMappingDataStandardScheme();
    }
  }

  private static class TSentryMappingDataStandardScheme extends StandardScheme<TSentryMappingData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSentryMappingData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_ROLES_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map156 = iprot.readMapBegin();
                struct.groupRolesMap = new HashMap<String,Set<String>>(2*_map156.size);
                for (int _i157 = 0; _i157 < _map156.size; ++_i157)
                {
                  String _key158; // required
                  Set<String> _val159; // required
                  _key158 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TSet _set160 = iprot.readSetBegin();
                    _val159 = new HashSet<String>(2*_set160.size);
                    for (int _i161 = 0; _i161 < _set160.size; ++_i161)
                    {
                      String _elem162; // required
                      _elem162 = iprot.readString();
                      _val159.add(_elem162);
                    }
                    iprot.readSetEnd();
                  }
                  struct.groupRolesMap.put(_key158, _val159);
                }
                iprot.readMapEnd();
              }
              struct.setGroupRolesMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROLE_PRIVILEGES_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map163 = iprot.readMapBegin();
                struct.rolePrivilegesMap = new HashMap<String,Set<TSentryPrivilege>>(2*_map163.size);
                for (int _i164 = 0; _i164 < _map163.size; ++_i164)
                {
                  String _key165; // required
                  Set<TSentryPrivilege> _val166; // required
                  _key165 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TSet _set167 = iprot.readSetBegin();
                    _val166 = new HashSet<TSentryPrivilege>(2*_set167.size);
                    for (int _i168 = 0; _i168 < _set167.size; ++_i168)
                    {
                      TSentryPrivilege _elem169; // required
                      _elem169 = new TSentryPrivilege();
                      _elem169.read(iprot);
                      _val166.add(_elem169);
                    }
                    iprot.readSetEnd();
                  }
                  struct.rolePrivilegesMap.put(_key165, _val166);
                }
                iprot.readMapEnd();
              }
              struct.setRolePrivilegesMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ROLES_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map170 = iprot.readMapBegin();
                struct.userRolesMap = new HashMap<String,Set<String>>(2*_map170.size);
                for (int _i171 = 0; _i171 < _map170.size; ++_i171)
                {
                  String _key172; // required
                  Set<String> _val173; // required
                  _key172 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TSet _set174 = iprot.readSetBegin();
                    _val173 = new HashSet<String>(2*_set174.size);
                    for (int _i175 = 0; _i175 < _set174.size; ++_i175)
                    {
                      String _elem176; // required
                      _elem176 = iprot.readString();
                      _val173.add(_elem176);
                    }
                    iprot.readSetEnd();
                  }
                  struct.userRolesMap.put(_key172, _val173);
                }
                iprot.readMapEnd();
              }
              struct.setUserRolesMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSentryMappingData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groupRolesMap != null) {
        if (struct.isSetGroupRolesMap()) {
          oprot.writeFieldBegin(GROUP_ROLES_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.groupRolesMap.size()));
            for (Map.Entry<String, Set<String>> _iter177 : struct.groupRolesMap.entrySet())
            {
              oprot.writeString(_iter177.getKey());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter177.getValue().size()));
                for (String _iter178 : _iter177.getValue())
                {
                  oprot.writeString(_iter178);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rolePrivilegesMap != null) {
        if (struct.isSetRolePrivilegesMap()) {
          oprot.writeFieldBegin(ROLE_PRIVILEGES_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.rolePrivilegesMap.size()));
            for (Map.Entry<String, Set<TSentryPrivilege>> _iter179 : struct.rolePrivilegesMap.entrySet())
            {
              oprot.writeString(_iter179.getKey());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, _iter179.getValue().size()));
                for (TSentryPrivilege _iter180 : _iter179.getValue())
                {
                  _iter180.write(oprot);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.userRolesMap != null) {
        if (struct.isSetUserRolesMap()) {
          oprot.writeFieldBegin(USER_ROLES_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.userRolesMap.size()));
            for (Map.Entry<String, Set<String>> _iter181 : struct.userRolesMap.entrySet())
            {
              oprot.writeString(_iter181.getKey());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter181.getValue().size()));
                for (String _iter182 : _iter181.getValue())
                {
                  oprot.writeString(_iter182);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSentryMappingDataTupleSchemeFactory implements SchemeFactory {
    public TSentryMappingDataTupleScheme getScheme() {
      return new TSentryMappingDataTupleScheme();
    }
  }

  private static class TSentryMappingDataTupleScheme extends TupleScheme<TSentryMappingData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSentryMappingData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroupRolesMap()) {
        optionals.set(0);
      }
      if (struct.isSetRolePrivilegesMap()) {
        optionals.set(1);
      }
      if (struct.isSetUserRolesMap()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGroupRolesMap()) {
        {
          oprot.writeI32(struct.groupRolesMap.size());
          for (Map.Entry<String, Set<String>> _iter183 : struct.groupRolesMap.entrySet())
          {
            oprot.writeString(_iter183.getKey());
            {
              oprot.writeI32(_iter183.getValue().size());
              for (String _iter184 : _iter183.getValue())
              {
                oprot.writeString(_iter184);
              }
            }
          }
        }
      }
      if (struct.isSetRolePrivilegesMap()) {
        {
          oprot.writeI32(struct.rolePrivilegesMap.size());
          for (Map.Entry<String, Set<TSentryPrivilege>> _iter185 : struct.rolePrivilegesMap.entrySet())
          {
            oprot.writeString(_iter185.getKey());
            {
              oprot.writeI32(_iter185.getValue().size());
              for (TSentryPrivilege _iter186 : _iter185.getValue())
              {
                _iter186.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetUserRolesMap()) {
        {
          oprot.writeI32(struct.userRolesMap.size());
          for (Map.Entry<String, Set<String>> _iter187 : struct.userRolesMap.entrySet())
          {
            oprot.writeString(_iter187.getKey());
            {
              oprot.writeI32(_iter187.getValue().size());
              for (String _iter188 : _iter187.getValue())
              {
                oprot.writeString(_iter188);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSentryMappingData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map189 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.groupRolesMap = new HashMap<String,Set<String>>(2*_map189.size);
          for (int _i190 = 0; _i190 < _map189.size; ++_i190)
          {
            String _key191; // required
            Set<String> _val192; // required
            _key191 = iprot.readString();
            {
              org.apache.thrift.protocol.TSet _set193 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val192 = new HashSet<String>(2*_set193.size);
              for (int _i194 = 0; _i194 < _set193.size; ++_i194)
              {
                String _elem195; // required
                _elem195 = iprot.readString();
                _val192.add(_elem195);
              }
            }
            struct.groupRolesMap.put(_key191, _val192);
          }
        }
        struct.setGroupRolesMapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map196 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.rolePrivilegesMap = new HashMap<String,Set<TSentryPrivilege>>(2*_map196.size);
          for (int _i197 = 0; _i197 < _map196.size; ++_i197)
          {
            String _key198; // required
            Set<TSentryPrivilege> _val199; // required
            _key198 = iprot.readString();
            {
              org.apache.thrift.protocol.TSet _set200 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val199 = new HashSet<TSentryPrivilege>(2*_set200.size);
              for (int _i201 = 0; _i201 < _set200.size; ++_i201)
              {
                TSentryPrivilege _elem202; // required
                _elem202 = new TSentryPrivilege();
                _elem202.read(iprot);
                _val199.add(_elem202);
              }
            }
            struct.rolePrivilegesMap.put(_key198, _val199);
          }
        }
        struct.setRolePrivilegesMapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map203 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.userRolesMap = new HashMap<String,Set<String>>(2*_map203.size);
          for (int _i204 = 0; _i204 < _map203.size; ++_i204)
          {
            String _key205; // required
            Set<String> _val206; // required
            _key205 = iprot.readString();
            {
              org.apache.thrift.protocol.TSet _set207 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val206 = new HashSet<String>(2*_set207.size);
              for (int _i208 = 0; _i208 < _set207.size; ++_i208)
              {
                String _elem209; // required
                _elem209 = iprot.readString();
                _val206.add(_elem209);
              }
            }
            struct.userRolesMap.put(_key205, _val206);
          }
        }
        struct.setUserRolesMapIsSet(true);
      }
    }
  }

}

